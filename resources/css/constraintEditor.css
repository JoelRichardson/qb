#constraintEditor {
    border: thin solid black;
    background-color: white;
    position: absolute;
    display: none;
    min-width: 250px;
}

#constraintEditor > * {
    margin: 4px;
}

#constraintEditor .button.save {
    color: green;
}
#constraintEditor .button.save:hover {
    color: white;
    background-color: green;
}

#constraintEditor .button.cancel {
    color: red;
}
#constraintEditor .button.cancel:hover {
    color: white;
    background-color: red;
}


#constraintEditor.open {
    display: flex;
    flex-direction: row;
    align-items: center;
}

#constraintEditor [name="code"]::before {
    content: "(";
}

#constraintEditor [name="code"]::after {
    content: ")";
}

#constraintEditor [name="code"] {
    width: 15px;
    color: #ccc;
}

#constraintEditor .button.sync {

}

#constraintEditor.summarizing .button.sync {
    -webkit-animation: rotation 2s infinite linear;
}

@-webkit-keyframes rotation {
    from {
        -webkit-transform: rotate(0deg);
    }
    to {
        -webkit-transform: rotate(-359deg);
    }
}

/* The following rules make the right subset of controls appear in the constrain editor,
 * based on the selected operator. 
 * */

#constraintEditor .button.sync,
#constraintEditor input[name="value"],
#constraintEditor select[name="values"] {
    display: none;
}

#constraintEditor.lookup.bioentity select[name="value"]::after {
    content: " in ";
}

#constraintEditor.lookup.bioentity select[name="values"],
#constraintEditor.list select[name="values"],
#constraintEditor.subclass select[name="values"],
#constraintEditor.multivalue select[name="values"],
#constraintEditor.summarized select[name="values"]{
    display: block;
}
#constraintEditor.lookup input[name="value"],
#constraintEditor.value:not(.summarized) input[name="value"] {
    display: block;
}
#constraintEditor.value .button.sync,
#constraintEditor.multivalue .button.sync {
    display: block;
}
#constraintEditor.subclass [name="code"] {
    display: none;
}

/* special rule for null constraints. Still need *something* to take up space where
 * the input/select go. 
 * Solution: still display the input box but make it invisible.
 */
#constraintEditor.null input[name="value"] {
    display: block;
    opacity: 0;
    z-index: -1;
    width: 10px;
    flex-grow: 100;
}

#constraintEditor [name="overlay"] {
    position: absolute;
    top: 0px;
    left: 0px;
    width: 100%;
    height: 100%;
    margin: 0px;
    background-color: white;
    opacity: 0.5;
    display: none;
}
#constraintEditor.summarizing [name="overlay"] {
    display: block;
}
