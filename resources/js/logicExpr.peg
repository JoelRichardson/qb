// Grammar for parsing logic expressions 
// =====================================
//
// Accepts expressions like "A and (B or C)" 
// Adapted from the example here: https://pegjs.org/online
// Returns the abstract syntax tree
//

{
  function propagate(op, head, tail) {
      if (tail.length === 0) return head;
      return tail.reduce(function(result, element) {
        result.children.push(element[3]);
        return  result;
      }, {"op":op, children:[head]});
  }
}
Expression
  = _ head:Term tail:(_ ("or" / "OR") _ Term)* _ {
      return propagate("or", head, tail)
    }   

Term
  = head:Factor tail:(_ ("and" / "AND") _ Factor)* {
      return propagate("and", head, tail)
    }   

Factor
  = "(" _ expr:Expression _ ")" { return expr; }
  / Code

Code "code"
  = _ [A-Za-z] { return text().toUpperCase(); }

_ "whitespace"
  = [ \t\n\r]*

